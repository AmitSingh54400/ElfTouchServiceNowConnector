<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function($http, $scope, $sce) {
    /* widget controller */
    var c = this;
    $scope.isServiceTagAvailable = false;
    $scope.interactiveTab = false;
    $scope.authorization = "";
    $scope.authToken = "";
    $scope.liList = [];
    $scope.subLiList = [];
    $scope.actionHistory = [];
    $scope.serviceTag = "";
    var currentRunning = "";
    var currentIndex = "";
    var ws = '';
    var wsurl = c.data.communication_channel;
    var reportingurl = c.data.reporting_url;
    var baseUrl = c.data.api_url;
    var jwtToken = c.data.api_token;
    var sessionExpiry = "";
    var alreadyExporting = false;
    $scope.machinename = "";
    $scope.machinestatus = "";

    $scope.createNewSession = function () {
        var validateUseroptions = {
            method: 'POST',
            url: baseUrl + "/api/validateuser",
            headers: {
                "Content-Type": "application/json;charset=UTF-8",
                "Authorization": "Bearer " + jwtToken
            }
        };
        $http(validateUseroptions).then(function (response) {
            try{
                var res = response.data;
                if(res.status !== "Success") throw "Invalid Login";
                $scope.authorization = res.Authorization;
                $scope.authToken = res.AuthToken;
                sessionExpiry = new Date(new Date().getTime() + (60000 * 15));
                sessionExpiry = sessionExpiry.toISOString()
                return true;
            }
            catch(err){
                console.log("Nanoheal API Request Validation Failed. Please verify Nanoheal Configuration.!");
                return false;
            }
        });
    }

    $scope.checkSessionValidity = function () {
        if (sessionExpiry !== null) {
            var expirationDate = new Date(sessionExpiry);
            if (expirationDate > new Date()) {
                return;
            } else {
                $scope.createNewSession();
                return;
            }
        }
        return null;
    }

    var res = $scope.createNewSession();
    var profileDataoptions = {
        method: 'POST',
        url: baseUrl + "/api/profile/getProfileData",
        data: { "os": "Windows", "pageId": "1", "ossub": "NA" },
        headers: {
            "Content-Type": "application/json;charset=UTF-8",
            "Authorization": "Bearer " + $scope.authorization,
            "X-API-KEY": $scope.authToken
        }
    };

    //This will Request Main List 
    $scope.getMainList = function () {
        $scope.checkSessionValidity();
        $http(profileDataoptions).then(function (response) {
            $scope.liList = response.data.data;
        });
    }
    
    console.log("User Asset Data Is....");
    console.log(c.data.asset_data);
    $scope.getMainList();

    // This will request Machine Action History
    $scope.getMachineActionHistoryy = function () {
        try {
            $scope.checkSessionValidity();
            if ($scope.serviceTag == "") {
                var ele = angular.element('#servicetagBox');
                ele.focus()
                ele.css('border-color', 'red');
                return;
            }
            else {
                var ele = angular.element('#servicetagBox');
                ele.blur();
                ele.css('border-color', '');
                angular.element('#serviceTagError').css('display', 'none');
            }
            var machineHistoryoptions = {
                method: 'POST',
                url: baseUrl + "/api/profile/machineHistory",
                data: { "machine": $scope.serviceTag },
                headers: {
                    "Content-Type": "application/json;charset=UTF-8",
                    "Authorization": "Bearer " + $scope.authorization,
                    "X-API-KEY": $scope.authToken
                }
            };
            $http(machineHistoryoptions).then(function (response) {
                $scope.actionHistory = response.data;
            });
            var machineStatusoptions = {
                method: 'POST',
                url: baseUrl + "/api/profile/machineOnlineStatus",
                data: { "machine": $scope.serviceTag },
                headers: {
                    "Content-Type": "application/json;charset=UTF-8",
                    "Authorization": "Bearer " + $scope.authorization,
                    "X-API-KEY": $scope.authToken
                }
            };
            $http(machineStatusoptions).then(function (response) {
                $scope.machinename = response.data.machinename;
                $scope.machinestatus = response.data.machinestatus;
            });

        }
        catch (error) {
            console.log("Something Went Wrong!!");
        }
    }

    $scope.exportMachineActionHistory = function () {
        try {
            $scope.checkSessionValidity();
            if ($scope.serviceTag == "") {
                var ele = angular.element('#servicetagBox');
                ele.focus()
                ele.css('border-color', 'red');
                return;
            }
            else {
                var ele = angular.element('#servicetagBox');
                ele.blur();
                ele.css('border-color', '');
            }
            if (alreadyExporting) return;
            alreadyExporting = true;
            var machineHistoryoptions = {
                method: 'POST',
                url: baseUrl + "/api/profile/exportmachineHistory",
                data: { "machine": $scope.serviceTag },
                headers: {
                    "Content-Type": "application/json;charset=UTF-8",
                    "Authorization": "Bearer " + $scope.authorization,
                    "X-API-KEY": $scope.authToken
                }
            };
            $http(machineHistoryoptions).then(function (response) {
                var fname = "actionhistory.csv"
                if (navigator.appVersion.toString().indexOf('.NET') > 0) { // for IE browser
                    var blob = new Blob([response.data], {
                        type: "text/csv"
                    });
                    window.navigator.msSaveBlob(blob, fname);
                    alreadyExporting = false;
                } 
                else { // for other browsers
                    console.log(response);
                    var hiddenElement = document.createElement('a');
                    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(response.data);
                    hiddenElement.target = '_blank';
                    hiddenElement.download = 'actionhistory.csv';
                    hiddenElement.click();
                    alreadyExporting = false;
               }}, function (err) {          //second function "error"
                console.log(err);
                alreadyExporting = false;
            });
        }
        catch (error) {
            console.log("Something Went Wrong!!");
        }
    }

    // This will get L1 or L2 Item list based on type
    $scope.getFixes = function (event,indx, type) {
        $scope.checkSessionValidity();
        if(type == 'l1'){
            var els = document.getElementsByClassName('list-group-item selected')
            while (els[0]) {
                els[0].classList.remove('selected')
            }
            angular.element(event.currentTarget).addClass('selected');
        }
        var data = [{}];
        if (type == 'l1') {
            data = $scope.liList[indx]
        }
        else {
            data = $scope.subLiList[indx]
        }
        profileDataoptions.data = { "os": "Windows", "pageId": data['parentId'], "backId": data['page'], "menuitem": data['profile'], "ossub": "NA" };
        $http(profileDataoptions).then(function (response) {
            $scope.subLiList = response.data.data;
        });
    }

    $scope.trimData = function (str) {
        return decodeURIComponent((str + '').replace(/\+/g, '%20'))
    }

    // This will trigger Fix 
    $scope.triggerFix = function (event, indx, type) {
        $scope.checkSessionValidity();
        if ($scope.serviceTag == "") {
            var ele = angular.element('#servicetagBox');
            ele.focus()
            ele.css('border-color', 'red');
            return;
        }
        else {
            var ele = angular.element('#servicetagBox');
            ele.blur();
            ele.css('border-color', '');
        }
        var data = [{}];
        if (type == 'l1') {
            data = $scope.liList[indx]
        }
        else {
            data = $scope.subLiList[indx];
        }
        currentRunning = type;
        currentIndex = indx;
        var triggerFixoptions = {
            method: 'POST',
            url: baseUrl + "/api/profile/actionInteractive",
            data: { "machine": $scope.serviceTag, "shortDesc": data['shortDesc'], "profileName": data['profile'], "dartNumber": data['dart'], "variable": data['variable'], "snusername": 'admin' },
            headers: {
                "Content-Type": "application/json;charset=UTF-8",
                "Authorization": "Bearer " + $scope.authorization,
                "X-API-KEY": $scope.authToken
            }
        };
        $http(triggerFixoptions).then(function (response) {
            if(response.data.serviceTagSupported != "" && response.data.serviceTagSupported != undefined){
                var JobData = {};
                JobData['Type'] = 'ExecuteJob';
                JobData['ServiceTag'] = $scope.serviceTag;
                ws.send(JSON.stringify(JobData));
                angular.element('#serviceTagError').css('display', 'none');
                angular.element(event.currentTarget).css('background', 'green');
                angular.element(event.currentTarget).css('color', '#ffff');
                angular.element(event.currentTarget).html("Solution Pushed");
            }
            else{
                var ele = angular.element('#servicetagBox');
                ele.focus()
                ele.css('border-color', 'red');
                angular.element('#serviceTagError').css('display', 'block');
            }
        });
    }

    if (ws === '') {
        if (window.location.protocol !== "https:") {
            wsconnect('ws://' + wsurl, reportingurl);
            console.log('Connecting to Communication Server : ' + 'http://' + wsurl);
        } else {
            wsconnect('wss://' + wsurl, reportingurl);
            console.log('Connecting to Communication Server : ' + 'https://' + wsurl);
        }
    } else {
        LogToConsole('Already Connected to Node');
    }

    // This will connect to web socket
    function wsconnect(wsurl, reportingurl) {
        ws = new WebSocket(wsurl);
        ws.onopen = function () {
            console.log('Connecting to Communication Server Success');
            var ConnectData = {};
            ConnectData['Type'] = 'Dashboard';
            ConnectData['AgentId'] = 'admin@nanoheal.com';
            ConnectData['AgentName'] = window.NOW.user_name;
            ConnectData['ReportingURL'] = reportingurl;
            ws.send(JSON.stringify(ConnectData));
        };
        ws.onmessage = function (msg) {
            ShowInteractiveJobProgress(msg);
        };
        ws.onclose = function () {
            setTimeout(function () {
                wsconnect(wsurl);
            }, 2000);
        };
    }

    // This piece of code will show progress on triggering any action
    function ShowInteractiveJobProgress(JobStatus) {
        var JsonMsg = JSON.parse(JobStatus.data);
        var Status = JsonMsg.Status;
        var ServiceTag = JsonMsg.ServiceTag;
        var mes = "";
        if (typeof ServiceTag !== "undefined") {
            if (ServiceTag.length > 0) {
                ServiceTag = ServiceTag.replace(/^\s+|\s+$/g, '');
            }
        }
        $scope.serviceTag = $scope.serviceTag.replace(/^\s+|\s+$/g, '');
        if ($scope.serviceTag !== ServiceTag) {
            console.log("Other Pc");
            return;
        }

        if (Status === 'System Online' || JobStatus === 'System Offline' || JobStatus === '' || JobStatus === 'ADMessage') {
            return;
        }
        var val = Status.split("=");
        var i, k;
        var liListHtml = '<ul style="list-style-type: none;margin-right: 10px;padding-left: 10px;">';
        var len = val.length;
        if (Status.indexOf("Execution Completed") !== -1 || Status.indexOf("Execution Terminated") !== -1 || Status.indexOf("Execution Failed") !== -1) {
            k = 4;
        } else {
            var cnt = val.length - 1;
            for (i = 1; i != cnt; i++) {
                liListHtml += '<li class="clearfix" style="height: 25px;"><div class="row"><div class="col-md-8 col-sm-8 col-xss-8">' + val[i].replace(/[0-9]/g, '') + '</div>';
                var statusVal = val[i + 1].charAt(0);
                if (statusVal === '1' || statusVal === 1) {
                    liListHtml += '<div class="col-md-4 col-sm-4 col-xss-4" style="float:right;text-align: right;"><img src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/fancybox_loading.gif" alt="" style="height: 20px;"/></div>';
                } else if (statusVal === '2' || statusVal === 2) {
                    liListHtml += '<div class="col-md-4 col-sm-4 col-xss-4" style="float:right;text-align: right;"><a href="#"><span style="color: #13933b;" class="glyphicon glyphicon-ok-circle"></span></a></div>';
                } else if (statusVal === '3' || statusVal === 3) {
                    liListHtml += '<div class="col-md-4 col-sm-4 col-xss-4" style="float:right;text-align: right;"><img src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/fancybox_loading.gif" alt="" style="height: 20px;"/></div>';
                } else {
                    liListHtml += '<span  style="float:right;"></span>';
                }
                liListHtml += '</div></li>';
                if (i === len - 2) {
                    k = val[i + 1].charAt(0);
                }
            }
        }
        liListHtml += '</ul>';
        if (Status === 'Execution Completed' || Status === 'Execution Terminated' || Status === 'Execution Failed' || Status === 'System Offline') {
            if (Status === 'System Offline') {
                liListHtml += '<span style="float:right;padding-right:10px;padding-bottom:5px;">System went Offline.</span>';
            } else if (Status === 'Execution Completed') {
                liListHtml += '<span style="float:right;padding-right:10px;padding-bottom:5px;">Solution has been executed successfully.</span>';
            } else if (Status === 'Execution Terminated') {
                liListHtml += '<span style="float:right;padding-right:10px;padding-bottom:5px;">Present solution has been cancelled.</span>';
            }
            else if (Status === 'Execution Failed') {
                liListHtml += '<span style="float:right;padding-right:10px;padding-bottom:5px;">Solution Execution failed.</span>';
            }
            if (currentRunning == 'l1') {
                if ($scope.liList[currentIndex])
                    $scope.liList[currentIndex]['notification'] = liListHtml;
            }
            else {
                if ($scope.subLiList[currentIndex])
                    $scope.subLiList[currentIndex]['notification'] = liListHtml;
            }
        }
        try {
            if (currentRunning == 'l1') {
                if ($scope.liList[currentIndex])
                    $scope.liList[currentIndex]['notification'] = liListHtml;
            }
            else {
                if ($scope.subLiList[currentIndex])
                    $scope.subLiList[currentIndex]['notification'] = liListHtml;
            }
        }
        catch (error) {
            console.log("Failed to push Progress Bar message");
        }
    }

    // This is used to convert dom text to html
    $scope.renderHtml = function (htmlCode) {
        return $sce.trustAsHtml(htmlCode);
    };

    $scope.formatText = function(text){
        return text.replace(/[^\w\s',.?()-]/gi, '')
    }

}]]></client_script>
        <controller_as>c</controller_as>
        <css>#toolboxList&gt;li { cursor: pointer}&#13;
#parentDesc{margin-top: 10px;font-size: 17px;text-align: justify;}&#13;
#listDiv{margin-top: 10px;}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link/>
        <name>Self help by Nanoheal</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function () {
    var nanoheal_config = new GlideRecord('x_179178_nanohealc_nanoheal_configuration');
    nanoheal_config.query();   // Issue the query to the database to get relevant records  
    while (nanoheal_config.next()) {
        data.reporting_url = nanoheal_config.getValue('reporting_url');
        data.api_url =  nanoheal_config.getValue('api_url');
        data.api_token = nanoheal_config.getValue('api_token');
        data.communication_channel = nanoheal_config.getValue('communication_channel');
    }

    var userID = gs.getUserID();
    var asset_qry = new GlideRecord('alm_asset');
    asset_qry.addQuery('owned_by', userID);
    asset_qry.query();   // Issue the query to the database to get relevant records
    var i = 0; 
    data.asset_data = []; 
    while (asset_qry.next()) {
        data.asset_data[i] = asset_qry;
        i++;
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-15 11:15:26</sys_created_on>
        <sys_id>8009622f0f2f03007c72943be1050e96</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>Self help by Nanoheal</sys_name>
        <sys_package display_value="NanohealConnector" source="x_179178_nanohealc">9d0406230f2f03007c72943be1050e29</sys_package>
        <sys_policy/>
        <sys_scope display_value="NanohealConnector">9d0406230f2f03007c72943be1050e29</sys_scope>
        <sys_update_name>sp_widget_8009622f0f2f03007c72943be1050e96</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-02-22 12:28:53</sys_updated_on>
        <template><![CDATA[<style>
    .repair {
        float: right;
        width: 10%;
        height: auto;
        min-height: 35px;
        background: #48b2e4;
        border-radius: 5px;
        text-align: center;
        font-size: 15px;
        position: absolute;
        right: 23px;
        top: 23px;
        color: white;
    }
    
    .repair a {
        color: white;
        text-decoration: none;
        display: block;
        padding: 5px;
    }
    
    li>span>h4 {
        width: 90%
    }
    
    li>span>p {
        width: 90%
    }
    
    .export {
        width: 10%;
        height: auto;
        min-height: 35px;
        background: #48b2e4;
        border-radius: 5px;
        text-align: center;
        font-size: 15px;
        margin: 0px 25px 10px auto;
    }
    
    .export a {
        color: white;
        text-decoration: none;
        display: block;
        padding: 5px;
    }
    
    li.selected {
        background: #48b2e4;
    }
    
    li.list-group-item.selected {
        color: white !important;
    }

    #toolboxList li a:hover {
        color: inherit;
    }
    
    .topheader {
        border-style: solid;
        border-color: #ddd;
        margin-bottom: 15px;
        margin-left: 3px;
        padding-top: 15px;
        padding-bottom: 5px;
        width: 100%;
        border-width: 1px;
        background-color: #f5f5f5;
    }
</style>
<script type="text/javascript">

</script>
<div id="errorTab1" ng-show="::!isServiceTagAvailable" style="width:70%;margin: 20px 0px;">
    <div class="input-group">
        <input type="text" ng-model="serviceTag" id="servicetagBox" class="form-control" placeholder="Please enter your Service Tag."
        />
        <span class="input-group-btn" style="padding-left: 10px;">
          <button class="btn btn-default" type="button" ng-click="getMachineActionHistoryy();" style="background: #48b2e4;color: white;">Go!</button>
   	     </span>
    </div>
    <span style="color: red;display: none;padding: 5px 0px;" id="serviceTagError">Invalid Service Tag</span>
</div>
<div class="row topheader">
    <div class="col-md-2"><strong>Machine Name:</strong></div>
    <div class="col-md-2">{{machinename}}</div>
    <div class="col-md-2"><strong>Machine Status:</strong></div>
    <div class="col-md-2" id="machinestatus3">{{machinestatus}}</div>
</div>
<ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#home" target="_self">Troubleshooter</a></li>
    <li><a data-toggle="tab" href="#menu1" target="_self">Action History</a></li>
</ul>

<div class="tab-content">
    <div id="home" class="tab-pane fade in active">
        <div class="row clearfix" localized="" style="width:100%;">
            <div class="col-lg-3 col-md-4 col-sm-12 col-xs-12 left equalHeight">
                <div id="toolboxLists" class="resolution-list customscroll mCustomScrollbar _mCS_8 mCS-autoHide mCS_no_scrollbar" style="position: relative; overflow: visible;">
                    <ul id="toolboxList" class="list-group">
                        <li class="list-group-item" ng-repeat="item in liList" ng-click="getFixes($event,$index,'l1')">{{formatText(item.profile)}}</li>
                    </ul>
                </div>
            </div>
            <div class="col-lg-9 col-md-8 col-sm-12 col-xs-12 right equalHeight">
                <p id="parentDesc" localized="" ng-if="subLiList.length == 0">Use these troubleshooting and resolution tools to quickly and easily resolve many common device issues. Choose
                    a category on the left and then select the fix that best matches the issue you are experiencing.</p>
                <div id="listDiv" class="" localized="" style="position: relative; overflow: visible;">
                    <ul id="clickList" class="list-group">
                        <li class="list-group-item" ng-repeat="item in subLiList">
                            <span ng-if="item.dart == 'null'">
                  <h4 style="width:85%;">{{item.shortDesc}}</h4><p style="width:85%;">{{trimData(item.description)}}</p>
                  <div style="display: block;" class="repair" ng-click="getFixes($event,$index,'l2')"><a href="javascript:;"><i aria-hidden="true" class="fa fa-angle-right"></i></a></div>
                  </span>
                            <span ng-if="item.dart != 'null'">
                  <h4 style="width:85%;">{{item.shortDesc}}</h4><p style="width:85%;">{{trimData(item.description)}}</p>
                  <div style="display: block;" class="repair" ng-click="triggerFix($event,$index,'l2')"><a href="javascript:;">Run</a></div>
                  <div ng-bind-html="renderHtml(item.notification)" style="min-height: 15px;"></div>
                  </span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div id="menu1" class="tab-pane fade">
        <div class="row" style="width: 100%;margin-top: 7px;">
            <div class="export" localized="" style="display: block;float: right;margin-right: 10px;">
                <a href="javascript:;" ng-click="getMachineActionHistoryy();">
                    <span class="glyphicon glyphicon-refresh"></span> Refresh
                </a>
            </div>
            <div class="export" localized="" style="display: block;float: right">
                <a href="javascript:;" ng-click="exportMachineActionHistory();">Export</a>
            </div>
        </div>
        <ul class="list-group">
            <li class="list-group-item" style="width: 98.5%;">
                <div class="row">
                    <div class="col-md-1 col-sm-1 col-xsm-1"><strong>SL No</strong></div>
                    <div class="col-md-2 col-sm-2 col-xsm-2"><strong>Machine Name</strong></div>
                    <div class="col-md-2 col-sm-2 col-xsm-2"><strong>Agent Name</strong></div>
                    <div class="col-md-2 col-sm-2 col-xsm-2"><strong>Created Time</strong></div>
                    <div class="col-md-3 col-sm-3 col-xsm-3"><strong>Profile Name</strong></div>
                    <div class="col-md-2 col-sm-2 col-xsm-2"><strong>Status</strong></div>
                </div>
            </li>
            <div style="max-height: 400px;overflow-y:scroll;">
                <li class="list-group-item" ng-repeat="item in actionHistory">
                    <div class="row">
                        <div class="col-md-1 col-sm-1 col-xsm-1">{{($index+1)}}</div>
                        <div class="col-md-2 col-sm-2 col-xsm-2">{{item.MachineTag}}</div>
                        <div class="col-md-2 col-sm-2 col-xsm-2">{{item.AgentName}}</div>
                        <div class="col-md-2 col-sm-2 col-xsm-2">{{item.JobCreatedTime}}</div>
                        <div class="col-md-3 col-sm-3 col-xsm-3">{{item.ProfileName}}</div>
                        <div ng-switch on="item.JobStatus">
                            <div ng-switch-when="Completed" class="col-md-2 col-sm-2 col-xsm-2" style="color: #008000;">{{item.JobStatus}}</div>
                            <div ng-switch-when="Failed" class="col-md-2 col-sm-2 col-xsm-2" style="color: #FF0000;">{{item.JobStatus}}</div>
                            <div ng-switch-when="Pending" class="col-md-2 col-sm-2 col-xsm-2" style="color: #FFA500;">{{item.JobStatus}}</div>
                            <div ng-switch-default>{{item.JobStatus}}</div>
                        </div>
                    </div>
                </li>
            </div>
        </ul>
    </div>
</div>]]></template>
    </sp_widget>
</record_update>
